// source: src/apps/parseBlocks/proto/block.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js');
goog.object.extend(proto, google_protobuf_timestamp_pb);
goog.exportSymbol('proto.BigInt', null, global);
goog.exportSymbol('proto.Block', null, global);
goog.exportSymbol('proto.BlockHeader', null, global);
goog.exportSymbol('proto.Log', null, global);
goog.exportSymbol('proto.Proof', null, global);
goog.exportSymbol('proto.Receipt', null, global);
goog.exportSymbol('proto.Transaction', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Block = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Block.repeatedFields_, null);
};
goog.inherits(proto.Block, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Block.displayName = 'proto.Block';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.BlockHeader = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.BlockHeader, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.BlockHeader.displayName = 'proto.BlockHeader';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Transaction = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Transaction, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Transaction.displayName = 'proto.Transaction';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Proof = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Proof, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Proof.displayName = 'proto.Proof';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.BigInt = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.BigInt, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.BigInt.displayName = 'proto.BigInt';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Log = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Log.repeatedFields_, null);
};
goog.inherits(proto.Log, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Log.displayName = 'proto.Log';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Receipt = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Receipt.repeatedFields_, null);
};
goog.inherits(proto.Receipt, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Receipt.displayName = 'proto.Receipt';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Block.repeatedFields_ = [2,3,4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Block.prototype.toObject = function(opt_includeInstance) {
  return proto.Block.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Block} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Block.toObject = function(includeInstance, msg) {
  var f, obj = {
    header: (f = msg.getHeader()) && proto.BlockHeader.toObject(includeInstance, f),
    transactionsList: jspb.Message.toObjectList(msg.getTransactionsList(),
    proto.Transaction.toObject, includeInstance),
    logsList: jspb.Message.toObjectList(msg.getLogsList(),
    proto.Log.toObject, includeInstance),
    receiptsList: jspb.Message.toObjectList(msg.getReceiptsList(),
    proto.Receipt.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Block}
 */
proto.Block.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Block;
  return proto.Block.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Block} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Block}
 */
proto.Block.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.BlockHeader;
      reader.readMessage(value,proto.BlockHeader.deserializeBinaryFromReader);
      msg.setHeader(value);
      break;
    case 2:
      var value = new proto.Transaction;
      reader.readMessage(value,proto.Transaction.deserializeBinaryFromReader);
      msg.addTransactions(value);
      break;
    case 3:
      var value = new proto.Log;
      reader.readMessage(value,proto.Log.deserializeBinaryFromReader);
      msg.addLogs(value);
      break;
    case 4:
      var value = new proto.Receipt;
      reader.readMessage(value,proto.Receipt.deserializeBinaryFromReader);
      msg.addReceipts(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Block.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Block.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Block} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Block.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeader();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.BlockHeader.serializeBinaryToWriter
    );
  }
  f = message.getTransactionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.Transaction.serializeBinaryToWriter
    );
  }
  f = message.getLogsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.Log.serializeBinaryToWriter
    );
  }
  f = message.getReceiptsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.Receipt.serializeBinaryToWriter
    );
  }
};


/**
 * optional BlockHeader header = 1;
 * @return {?proto.BlockHeader}
 */
proto.Block.prototype.getHeader = function() {
  return /** @type{?proto.BlockHeader} */ (
    jspb.Message.getWrapperField(this, proto.BlockHeader, 1));
};


/**
 * @param {?proto.BlockHeader|undefined} value
 * @return {!proto.Block} returns this
*/
proto.Block.prototype.setHeader = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Block} returns this
 */
proto.Block.prototype.clearHeader = function() {
  return this.setHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Block.prototype.hasHeader = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated Transaction transactions = 2;
 * @return {!Array<!proto.Transaction>}
 */
proto.Block.prototype.getTransactionsList = function() {
  return /** @type{!Array<!proto.Transaction>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Transaction, 2));
};


/**
 * @param {!Array<!proto.Transaction>} value
 * @return {!proto.Block} returns this
*/
proto.Block.prototype.setTransactionsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.Transaction=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Transaction}
 */
proto.Block.prototype.addTransactions = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.Transaction, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Block} returns this
 */
proto.Block.prototype.clearTransactionsList = function() {
  return this.setTransactionsList([]);
};


/**
 * repeated Log logs = 3;
 * @return {!Array<!proto.Log>}
 */
proto.Block.prototype.getLogsList = function() {
  return /** @type{!Array<!proto.Log>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Log, 3));
};


/**
 * @param {!Array<!proto.Log>} value
 * @return {!proto.Block} returns this
*/
proto.Block.prototype.setLogsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.Log=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Log}
 */
proto.Block.prototype.addLogs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.Log, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Block} returns this
 */
proto.Block.prototype.clearLogsList = function() {
  return this.setLogsList([]);
};


/**
 * repeated Receipt receipts = 4;
 * @return {!Array<!proto.Receipt>}
 */
proto.Block.prototype.getReceiptsList = function() {
  return /** @type{!Array<!proto.Receipt>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Receipt, 4));
};


/**
 * @param {!Array<!proto.Receipt>} value
 * @return {!proto.Block} returns this
*/
proto.Block.prototype.setReceiptsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.Receipt=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Receipt}
 */
proto.Block.prototype.addReceipts = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.Receipt, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Block} returns this
 */
proto.Block.prototype.clearReceiptsList = function() {
  return this.setReceiptsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.BlockHeader.prototype.toObject = function(opt_includeInstance) {
  return proto.BlockHeader.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.BlockHeader} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.BlockHeader.toObject = function(includeInstance, msg) {
  var f, obj = {
    parentHash: msg.getParentHash_asB64(),
    uncleHash: msg.getUncleHash_asB64(),
    miner: msg.getMiner_asB64(),
    stateRoot: msg.getStateRoot_asB64(),
    transactionsRoot: msg.getTransactionsRoot_asB64(),
    receiptRoot: msg.getReceiptRoot_asB64(),
    logsBloom: msg.getLogsBloom_asB64(),
    difficulty: (f = msg.getDifficulty()) && proto.BigInt.toObject(includeInstance, f),
    number: jspb.Message.getFieldWithDefault(msg, 9, 0),
    gasLimit: jspb.Message.getFieldWithDefault(msg, 10, 0),
    gasUsed: jspb.Message.getFieldWithDefault(msg, 11, 0),
    timestamp: (f = msg.getTimestamp()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    extraData: msg.getExtraData_asB64(),
    mixHash: msg.getMixHash_asB64(),
    nonce: jspb.Message.getFieldWithDefault(msg, 15, 0),
    hash: msg.getHash_asB64(),
    baseFeePerGas: msg.getBaseFeePerGas_asB64(),
    rlp: msg.getRlp_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.BlockHeader}
 */
proto.BlockHeader.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.BlockHeader;
  return proto.BlockHeader.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.BlockHeader} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.BlockHeader}
 */
proto.BlockHeader.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setParentHash(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setUncleHash(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setMiner(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setStateRoot(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setTransactionsRoot(value);
      break;
    case 6:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setReceiptRoot(value);
      break;
    case 7:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setLogsBloom(value);
      break;
    case 8:
      var value = new proto.BigInt;
      reader.readMessage(value,proto.BigInt.deserializeBinaryFromReader);
      msg.setDifficulty(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setNumber(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setGasLimit(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setGasUsed(value);
      break;
    case 12:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setTimestamp(value);
      break;
    case 13:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setExtraData(value);
      break;
    case 14:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setMixHash(value);
      break;
    case 15:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setNonce(value);
      break;
    case 16:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setHash(value);
      break;
    case 17:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBaseFeePerGas(value);
      break;
    case 18:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setRlp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.BlockHeader.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.BlockHeader.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.BlockHeader} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.BlockHeader.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getParentHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getUncleHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getMiner_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getStateRoot_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = message.getTransactionsRoot_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      5,
      f
    );
  }
  f = message.getReceiptRoot_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      6,
      f
    );
  }
  f = message.getLogsBloom_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      7,
      f
    );
  }
  f = message.getDifficulty();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.BigInt.serializeBinaryToWriter
    );
  }
  f = message.getNumber();
  if (f !== 0) {
    writer.writeUint64(
      9,
      f
    );
  }
  f = message.getGasLimit();
  if (f !== 0) {
    writer.writeUint64(
      10,
      f
    );
  }
  f = message.getGasUsed();
  if (f !== 0) {
    writer.writeUint64(
      11,
      f
    );
  }
  f = message.getTimestamp();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getExtraData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      13,
      f
    );
  }
  f = message.getMixHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      14,
      f
    );
  }
  f = message.getNonce();
  if (f !== 0) {
    writer.writeUint64(
      15,
      f
    );
  }
  f = message.getHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      16,
      f
    );
  }
  f = message.getBaseFeePerGas_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      17,
      f
    );
  }
  f = message.getRlp_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      18,
      f
    );
  }
};


/**
 * optional bytes parent_hash = 1;
 * @return {!(string|Uint8Array)}
 */
proto.BlockHeader.prototype.getParentHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes parent_hash = 1;
 * This is a type-conversion wrapper around `getParentHash()`
 * @return {string}
 */
proto.BlockHeader.prototype.getParentHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getParentHash()));
};


/**
 * optional bytes parent_hash = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getParentHash()`
 * @return {!Uint8Array}
 */
proto.BlockHeader.prototype.getParentHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getParentHash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.BlockHeader} returns this
 */
proto.BlockHeader.prototype.setParentHash = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes uncle_hash = 2;
 * @return {!(string|Uint8Array)}
 */
proto.BlockHeader.prototype.getUncleHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes uncle_hash = 2;
 * This is a type-conversion wrapper around `getUncleHash()`
 * @return {string}
 */
proto.BlockHeader.prototype.getUncleHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getUncleHash()));
};


/**
 * optional bytes uncle_hash = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getUncleHash()`
 * @return {!Uint8Array}
 */
proto.BlockHeader.prototype.getUncleHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getUncleHash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.BlockHeader} returns this
 */
proto.BlockHeader.prototype.setUncleHash = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional bytes miner = 3;
 * @return {!(string|Uint8Array)}
 */
proto.BlockHeader.prototype.getMiner = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes miner = 3;
 * This is a type-conversion wrapper around `getMiner()`
 * @return {string}
 */
proto.BlockHeader.prototype.getMiner_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getMiner()));
};


/**
 * optional bytes miner = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getMiner()`
 * @return {!Uint8Array}
 */
proto.BlockHeader.prototype.getMiner_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getMiner()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.BlockHeader} returns this
 */
proto.BlockHeader.prototype.setMiner = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional bytes state_root = 4;
 * @return {!(string|Uint8Array)}
 */
proto.BlockHeader.prototype.getStateRoot = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes state_root = 4;
 * This is a type-conversion wrapper around `getStateRoot()`
 * @return {string}
 */
proto.BlockHeader.prototype.getStateRoot_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getStateRoot()));
};


/**
 * optional bytes state_root = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getStateRoot()`
 * @return {!Uint8Array}
 */
proto.BlockHeader.prototype.getStateRoot_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getStateRoot()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.BlockHeader} returns this
 */
proto.BlockHeader.prototype.setStateRoot = function(value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};


/**
 * optional bytes transactions_root = 5;
 * @return {!(string|Uint8Array)}
 */
proto.BlockHeader.prototype.getTransactionsRoot = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * optional bytes transactions_root = 5;
 * This is a type-conversion wrapper around `getTransactionsRoot()`
 * @return {string}
 */
proto.BlockHeader.prototype.getTransactionsRoot_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getTransactionsRoot()));
};


/**
 * optional bytes transactions_root = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTransactionsRoot()`
 * @return {!Uint8Array}
 */
proto.BlockHeader.prototype.getTransactionsRoot_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getTransactionsRoot()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.BlockHeader} returns this
 */
proto.BlockHeader.prototype.setTransactionsRoot = function(value) {
  return jspb.Message.setProto3BytesField(this, 5, value);
};


/**
 * optional bytes receipt_root = 6;
 * @return {!(string|Uint8Array)}
 */
proto.BlockHeader.prototype.getReceiptRoot = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * optional bytes receipt_root = 6;
 * This is a type-conversion wrapper around `getReceiptRoot()`
 * @return {string}
 */
proto.BlockHeader.prototype.getReceiptRoot_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getReceiptRoot()));
};


/**
 * optional bytes receipt_root = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getReceiptRoot()`
 * @return {!Uint8Array}
 */
proto.BlockHeader.prototype.getReceiptRoot_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getReceiptRoot()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.BlockHeader} returns this
 */
proto.BlockHeader.prototype.setReceiptRoot = function(value) {
  return jspb.Message.setProto3BytesField(this, 6, value);
};


/**
 * optional bytes logs_bloom = 7;
 * @return {!(string|Uint8Array)}
 */
proto.BlockHeader.prototype.getLogsBloom = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * optional bytes logs_bloom = 7;
 * This is a type-conversion wrapper around `getLogsBloom()`
 * @return {string}
 */
proto.BlockHeader.prototype.getLogsBloom_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getLogsBloom()));
};


/**
 * optional bytes logs_bloom = 7;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getLogsBloom()`
 * @return {!Uint8Array}
 */
proto.BlockHeader.prototype.getLogsBloom_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getLogsBloom()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.BlockHeader} returns this
 */
proto.BlockHeader.prototype.setLogsBloom = function(value) {
  return jspb.Message.setProto3BytesField(this, 7, value);
};


/**
 * optional BigInt difficulty = 8;
 * @return {?proto.BigInt}
 */
proto.BlockHeader.prototype.getDifficulty = function() {
  return /** @type{?proto.BigInt} */ (
    jspb.Message.getWrapperField(this, proto.BigInt, 8));
};


/**
 * @param {?proto.BigInt|undefined} value
 * @return {!proto.BlockHeader} returns this
*/
proto.BlockHeader.prototype.setDifficulty = function(value) {
  return jspb.Message.setWrapperField(this, 8, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.BlockHeader} returns this
 */
proto.BlockHeader.prototype.clearDifficulty = function() {
  return this.setDifficulty(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.BlockHeader.prototype.hasDifficulty = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional uint64 number = 9;
 * @return {number}
 */
proto.BlockHeader.prototype.getNumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.BlockHeader} returns this
 */
proto.BlockHeader.prototype.setNumber = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional uint64 gas_limit = 10;
 * @return {number}
 */
proto.BlockHeader.prototype.getGasLimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {number} value
 * @return {!proto.BlockHeader} returns this
 */
proto.BlockHeader.prototype.setGasLimit = function(value) {
  return jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * optional uint64 gas_used = 11;
 * @return {number}
 */
proto.BlockHeader.prototype.getGasUsed = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/**
 * @param {number} value
 * @return {!proto.BlockHeader} returns this
 */
proto.BlockHeader.prototype.setGasUsed = function(value) {
  return jspb.Message.setProto3IntField(this, 11, value);
};


/**
 * optional google.protobuf.Timestamp timestamp = 12;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.BlockHeader.prototype.getTimestamp = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 12));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.BlockHeader} returns this
*/
proto.BlockHeader.prototype.setTimestamp = function(value) {
  return jspb.Message.setWrapperField(this, 12, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.BlockHeader} returns this
 */
proto.BlockHeader.prototype.clearTimestamp = function() {
  return this.setTimestamp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.BlockHeader.prototype.hasTimestamp = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional bytes extra_data = 13;
 * @return {!(string|Uint8Array)}
 */
proto.BlockHeader.prototype.getExtraData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/**
 * optional bytes extra_data = 13;
 * This is a type-conversion wrapper around `getExtraData()`
 * @return {string}
 */
proto.BlockHeader.prototype.getExtraData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getExtraData()));
};


/**
 * optional bytes extra_data = 13;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getExtraData()`
 * @return {!Uint8Array}
 */
proto.BlockHeader.prototype.getExtraData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getExtraData()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.BlockHeader} returns this
 */
proto.BlockHeader.prototype.setExtraData = function(value) {
  return jspb.Message.setProto3BytesField(this, 13, value);
};


/**
 * optional bytes mix_hash = 14;
 * @return {!(string|Uint8Array)}
 */
proto.BlockHeader.prototype.getMixHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 14, ""));
};


/**
 * optional bytes mix_hash = 14;
 * This is a type-conversion wrapper around `getMixHash()`
 * @return {string}
 */
proto.BlockHeader.prototype.getMixHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getMixHash()));
};


/**
 * optional bytes mix_hash = 14;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getMixHash()`
 * @return {!Uint8Array}
 */
proto.BlockHeader.prototype.getMixHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getMixHash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.BlockHeader} returns this
 */
proto.BlockHeader.prototype.setMixHash = function(value) {
  return jspb.Message.setProto3BytesField(this, 14, value);
};


/**
 * optional uint64 nonce = 15;
 * @return {number}
 */
proto.BlockHeader.prototype.getNonce = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 15, 0));
};


/**
 * @param {number} value
 * @return {!proto.BlockHeader} returns this
 */
proto.BlockHeader.prototype.setNonce = function(value) {
  return jspb.Message.setProto3IntField(this, 15, value);
};


/**
 * optional bytes hash = 16;
 * @return {!(string|Uint8Array)}
 */
proto.BlockHeader.prototype.getHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 16, ""));
};


/**
 * optional bytes hash = 16;
 * This is a type-conversion wrapper around `getHash()`
 * @return {string}
 */
proto.BlockHeader.prototype.getHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getHash()));
};


/**
 * optional bytes hash = 16;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getHash()`
 * @return {!Uint8Array}
 */
proto.BlockHeader.prototype.getHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getHash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.BlockHeader} returns this
 */
proto.BlockHeader.prototype.setHash = function(value) {
  return jspb.Message.setProto3BytesField(this, 16, value);
};


/**
 * optional bytes base_fee_per_gas = 17;
 * @return {!(string|Uint8Array)}
 */
proto.BlockHeader.prototype.getBaseFeePerGas = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 17, ""));
};


/**
 * optional bytes base_fee_per_gas = 17;
 * This is a type-conversion wrapper around `getBaseFeePerGas()`
 * @return {string}
 */
proto.BlockHeader.prototype.getBaseFeePerGas_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBaseFeePerGas()));
};


/**
 * optional bytes base_fee_per_gas = 17;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBaseFeePerGas()`
 * @return {!Uint8Array}
 */
proto.BlockHeader.prototype.getBaseFeePerGas_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBaseFeePerGas()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.BlockHeader} returns this
 */
proto.BlockHeader.prototype.setBaseFeePerGas = function(value) {
  return jspb.Message.setProto3BytesField(this, 17, value);
};


/**
 * optional bytes rlp = 18;
 * @return {!(string|Uint8Array)}
 */
proto.BlockHeader.prototype.getRlp = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 18, ""));
};


/**
 * optional bytes rlp = 18;
 * This is a type-conversion wrapper around `getRlp()`
 * @return {string}
 */
proto.BlockHeader.prototype.getRlp_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getRlp()));
};


/**
 * optional bytes rlp = 18;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRlp()`
 * @return {!Uint8Array}
 */
proto.BlockHeader.prototype.getRlp_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getRlp()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.BlockHeader} returns this
 */
proto.BlockHeader.prototype.setRlp = function(value) {
  return jspb.Message.setProto3BytesField(this, 18, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Transaction.prototype.toObject = function(opt_includeInstance) {
  return proto.Transaction.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Transaction} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Transaction.toObject = function(includeInstance, msg) {
  var f, obj = {
    to: msg.getTo_asB64(),
    nonce: jspb.Message.getFieldWithDefault(msg, 2, 0),
    gasPrice: (f = msg.getGasPrice()) && proto.BigInt.toObject(includeInstance, f),
    gasLimit: jspb.Message.getFieldWithDefault(msg, 4, 0),
    value: (f = msg.getValue()) && proto.BigInt.toObject(includeInstance, f),
    input: msg.getInput_asB64(),
    v: msg.getV_asB64(),
    r: msg.getR_asB64(),
    s: msg.getS_asB64(),
    hash: msg.getHash_asB64(),
    from: msg.getFrom_asB64(),
    blockNumber: jspb.Message.getFieldWithDefault(msg, 23, 0),
    blockHash: msg.getBlockHash_asB64(),
    rlp: msg.getRlp_asB64(),
    merkleProof: (f = msg.getMerkleProof()) && proto.Proof.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Transaction}
 */
proto.Transaction.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Transaction;
  return proto.Transaction.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Transaction} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Transaction}
 */
proto.Transaction.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setTo(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setNonce(value);
      break;
    case 3:
      var value = new proto.BigInt;
      reader.readMessage(value,proto.BigInt.deserializeBinaryFromReader);
      msg.setGasPrice(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setGasLimit(value);
      break;
    case 5:
      var value = new proto.BigInt;
      reader.readMessage(value,proto.BigInt.deserializeBinaryFromReader);
      msg.setValue(value);
      break;
    case 6:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setInput(value);
      break;
    case 7:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setV(value);
      break;
    case 8:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setR(value);
      break;
    case 9:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setS(value);
      break;
    case 21:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setHash(value);
      break;
    case 22:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setFrom(value);
      break;
    case 23:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setBlockNumber(value);
      break;
    case 24:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBlockHash(value);
      break;
    case 25:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setRlp(value);
      break;
    case 26:
      var value = new proto.Proof;
      reader.readMessage(value,proto.Proof.deserializeBinaryFromReader);
      msg.setMerkleProof(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Transaction.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Transaction.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Transaction} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Transaction.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTo_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getNonce();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getGasPrice();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.BigInt.serializeBinaryToWriter
    );
  }
  f = message.getGasLimit();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getValue();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.BigInt.serializeBinaryToWriter
    );
  }
  f = message.getInput_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      6,
      f
    );
  }
  f = message.getV_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      7,
      f
    );
  }
  f = message.getR_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      8,
      f
    );
  }
  f = message.getS_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      9,
      f
    );
  }
  f = message.getHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      21,
      f
    );
  }
  f = message.getFrom_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      22,
      f
    );
  }
  f = message.getBlockNumber();
  if (f !== 0) {
    writer.writeUint64(
      23,
      f
    );
  }
  f = message.getBlockHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      24,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 25));
  if (f != null) {
    writer.writeBytes(
      25,
      f
    );
  }
  f = message.getMerkleProof();
  if (f != null) {
    writer.writeMessage(
      26,
      f,
      proto.Proof.serializeBinaryToWriter
    );
  }
};


/**
 * optional bytes to = 1;
 * @return {!(string|Uint8Array)}
 */
proto.Transaction.prototype.getTo = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes to = 1;
 * This is a type-conversion wrapper around `getTo()`
 * @return {string}
 */
proto.Transaction.prototype.getTo_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getTo()));
};


/**
 * optional bytes to = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTo()`
 * @return {!Uint8Array}
 */
proto.Transaction.prototype.getTo_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getTo()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.Transaction} returns this
 */
proto.Transaction.prototype.setTo = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional uint64 nonce = 2;
 * @return {number}
 */
proto.Transaction.prototype.getNonce = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.Transaction} returns this
 */
proto.Transaction.prototype.setNonce = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional BigInt gas_price = 3;
 * @return {?proto.BigInt}
 */
proto.Transaction.prototype.getGasPrice = function() {
  return /** @type{?proto.BigInt} */ (
    jspb.Message.getWrapperField(this, proto.BigInt, 3));
};


/**
 * @param {?proto.BigInt|undefined} value
 * @return {!proto.Transaction} returns this
*/
proto.Transaction.prototype.setGasPrice = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Transaction} returns this
 */
proto.Transaction.prototype.clearGasPrice = function() {
  return this.setGasPrice(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Transaction.prototype.hasGasPrice = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional uint64 gas_limit = 4;
 * @return {number}
 */
proto.Transaction.prototype.getGasLimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.Transaction} returns this
 */
proto.Transaction.prototype.setGasLimit = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional BigInt value = 5;
 * @return {?proto.BigInt}
 */
proto.Transaction.prototype.getValue = function() {
  return /** @type{?proto.BigInt} */ (
    jspb.Message.getWrapperField(this, proto.BigInt, 5));
};


/**
 * @param {?proto.BigInt|undefined} value
 * @return {!proto.Transaction} returns this
*/
proto.Transaction.prototype.setValue = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Transaction} returns this
 */
proto.Transaction.prototype.clearValue = function() {
  return this.setValue(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Transaction.prototype.hasValue = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional bytes input = 6;
 * @return {!(string|Uint8Array)}
 */
proto.Transaction.prototype.getInput = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * optional bytes input = 6;
 * This is a type-conversion wrapper around `getInput()`
 * @return {string}
 */
proto.Transaction.prototype.getInput_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getInput()));
};


/**
 * optional bytes input = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getInput()`
 * @return {!Uint8Array}
 */
proto.Transaction.prototype.getInput_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getInput()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.Transaction} returns this
 */
proto.Transaction.prototype.setInput = function(value) {
  return jspb.Message.setProto3BytesField(this, 6, value);
};


/**
 * optional bytes v = 7;
 * @return {!(string|Uint8Array)}
 */
proto.Transaction.prototype.getV = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * optional bytes v = 7;
 * This is a type-conversion wrapper around `getV()`
 * @return {string}
 */
proto.Transaction.prototype.getV_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getV()));
};


/**
 * optional bytes v = 7;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getV()`
 * @return {!Uint8Array}
 */
proto.Transaction.prototype.getV_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getV()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.Transaction} returns this
 */
proto.Transaction.prototype.setV = function(value) {
  return jspb.Message.setProto3BytesField(this, 7, value);
};


/**
 * optional bytes r = 8;
 * @return {!(string|Uint8Array)}
 */
proto.Transaction.prototype.getR = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * optional bytes r = 8;
 * This is a type-conversion wrapper around `getR()`
 * @return {string}
 */
proto.Transaction.prototype.getR_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getR()));
};


/**
 * optional bytes r = 8;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getR()`
 * @return {!Uint8Array}
 */
proto.Transaction.prototype.getR_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getR()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.Transaction} returns this
 */
proto.Transaction.prototype.setR = function(value) {
  return jspb.Message.setProto3BytesField(this, 8, value);
};


/**
 * optional bytes s = 9;
 * @return {!(string|Uint8Array)}
 */
proto.Transaction.prototype.getS = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * optional bytes s = 9;
 * This is a type-conversion wrapper around `getS()`
 * @return {string}
 */
proto.Transaction.prototype.getS_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getS()));
};


/**
 * optional bytes s = 9;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getS()`
 * @return {!Uint8Array}
 */
proto.Transaction.prototype.getS_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getS()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.Transaction} returns this
 */
proto.Transaction.prototype.setS = function(value) {
  return jspb.Message.setProto3BytesField(this, 9, value);
};


/**
 * optional bytes hash = 21;
 * @return {!(string|Uint8Array)}
 */
proto.Transaction.prototype.getHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 21, ""));
};


/**
 * optional bytes hash = 21;
 * This is a type-conversion wrapper around `getHash()`
 * @return {string}
 */
proto.Transaction.prototype.getHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getHash()));
};


/**
 * optional bytes hash = 21;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getHash()`
 * @return {!Uint8Array}
 */
proto.Transaction.prototype.getHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getHash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.Transaction} returns this
 */
proto.Transaction.prototype.setHash = function(value) {
  return jspb.Message.setProto3BytesField(this, 21, value);
};


/**
 * optional bytes from = 22;
 * @return {!(string|Uint8Array)}
 */
proto.Transaction.prototype.getFrom = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 22, ""));
};


/**
 * optional bytes from = 22;
 * This is a type-conversion wrapper around `getFrom()`
 * @return {string}
 */
proto.Transaction.prototype.getFrom_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getFrom()));
};


/**
 * optional bytes from = 22;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getFrom()`
 * @return {!Uint8Array}
 */
proto.Transaction.prototype.getFrom_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getFrom()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.Transaction} returns this
 */
proto.Transaction.prototype.setFrom = function(value) {
  return jspb.Message.setProto3BytesField(this, 22, value);
};


/**
 * optional uint64 block_number = 23;
 * @return {number}
 */
proto.Transaction.prototype.getBlockNumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 23, 0));
};


/**
 * @param {number} value
 * @return {!proto.Transaction} returns this
 */
proto.Transaction.prototype.setBlockNumber = function(value) {
  return jspb.Message.setProto3IntField(this, 23, value);
};


/**
 * optional bytes block_hash = 24;
 * @return {!(string|Uint8Array)}
 */
proto.Transaction.prototype.getBlockHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 24, ""));
};


/**
 * optional bytes block_hash = 24;
 * This is a type-conversion wrapper around `getBlockHash()`
 * @return {string}
 */
proto.Transaction.prototype.getBlockHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBlockHash()));
};


/**
 * optional bytes block_hash = 24;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBlockHash()`
 * @return {!Uint8Array}
 */
proto.Transaction.prototype.getBlockHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBlockHash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.Transaction} returns this
 */
proto.Transaction.prototype.setBlockHash = function(value) {
  return jspb.Message.setProto3BytesField(this, 24, value);
};


/**
 * optional bytes rlp = 25;
 * @return {!(string|Uint8Array)}
 */
proto.Transaction.prototype.getRlp = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 25, ""));
};


/**
 * optional bytes rlp = 25;
 * This is a type-conversion wrapper around `getRlp()`
 * @return {string}
 */
proto.Transaction.prototype.getRlp_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getRlp()));
};


/**
 * optional bytes rlp = 25;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRlp()`
 * @return {!Uint8Array}
 */
proto.Transaction.prototype.getRlp_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getRlp()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.Transaction} returns this
 */
proto.Transaction.prototype.setRlp = function(value) {
  return jspb.Message.setField(this, 25, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Transaction} returns this
 */
proto.Transaction.prototype.clearRlp = function() {
  return jspb.Message.setField(this, 25, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Transaction.prototype.hasRlp = function() {
  return jspb.Message.getField(this, 25) != null;
};


/**
 * optional Proof merkle_proof = 26;
 * @return {?proto.Proof}
 */
proto.Transaction.prototype.getMerkleProof = function() {
  return /** @type{?proto.Proof} */ (
    jspb.Message.getWrapperField(this, proto.Proof, 26));
};


/**
 * @param {?proto.Proof|undefined} value
 * @return {!proto.Transaction} returns this
*/
proto.Transaction.prototype.setMerkleProof = function(value) {
  return jspb.Message.setWrapperField(this, 26, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Transaction} returns this
 */
proto.Transaction.prototype.clearMerkleProof = function() {
  return this.setMerkleProof(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Transaction.prototype.hasMerkleProof = function() {
  return jspb.Message.getField(this, 26) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Proof.prototype.toObject = function(opt_includeInstance) {
  return proto.Proof.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Proof} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Proof.toObject = function(includeInstance, msg) {
  var f, obj = {
    proof: msg.getProof_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Proof}
 */
proto.Proof.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Proof;
  return proto.Proof.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Proof} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Proof}
 */
proto.Proof.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setProof(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Proof.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Proof.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Proof} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Proof.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProof_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes proof = 1;
 * @return {!(string|Uint8Array)}
 */
proto.Proof.prototype.getProof = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes proof = 1;
 * This is a type-conversion wrapper around `getProof()`
 * @return {string}
 */
proto.Proof.prototype.getProof_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getProof()));
};


/**
 * optional bytes proof = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getProof()`
 * @return {!Uint8Array}
 */
proto.Proof.prototype.getProof_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getProof()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.Proof} returns this
 */
proto.Proof.prototype.setProof = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.BigInt.prototype.toObject = function(opt_includeInstance) {
  return proto.BigInt.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.BigInt} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.BigInt.toObject = function(includeInstance, msg) {
  var f, obj = {
    value: msg.getValue_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.BigInt}
 */
proto.BigInt.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.BigInt;
  return proto.BigInt.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.BigInt} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.BigInt}
 */
proto.BigInt.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.BigInt.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.BigInt.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.BigInt} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.BigInt.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValue_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes value = 1;
 * @return {!(string|Uint8Array)}
 */
proto.BigInt.prototype.getValue = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes value = 1;
 * This is a type-conversion wrapper around `getValue()`
 * @return {string}
 */
proto.BigInt.prototype.getValue_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getValue()));
};


/**
 * optional bytes value = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getValue()`
 * @return {!Uint8Array}
 */
proto.BigInt.prototype.getValue_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getValue()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.BigInt} returns this
 */
proto.BigInt.prototype.setValue = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Log.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Log.prototype.toObject = function(opt_includeInstance) {
  return proto.Log.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Log} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Log.toObject = function(includeInstance, msg) {
  var f, obj = {
    address: msg.getAddress_asB64(),
    topicsList: msg.getTopicsList_asB64(),
    data: msg.getData_asB64(),
    index: jspb.Message.getFieldWithDefault(msg, 4, 0),
    blockIndex: jspb.Message.getFieldWithDefault(msg, 5, 0),
    blockHash: msg.getBlockHash_asB64(),
    transactionIndex: jspb.Message.getFieldWithDefault(msg, 7, 0),
    transactionHash: msg.getTransactionHash_asB64(),
    rlp: msg.getRlp_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Log}
 */
proto.Log.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Log;
  return proto.Log.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Log} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Log}
 */
proto.Log.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAddress(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.addTopics(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setData(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setIndex(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setBlockIndex(value);
      break;
    case 6:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBlockHash(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTransactionIndex(value);
      break;
    case 8:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setTransactionHash(value);
      break;
    case 9:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setRlp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Log.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Log.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Log} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Log.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAddress_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getTopicsList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      2,
      f
    );
  }
  f = message.getData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getIndex();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getBlockIndex();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = message.getBlockHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      6,
      f
    );
  }
  f = message.getTransactionIndex();
  if (f !== 0) {
    writer.writeUint32(
      7,
      f
    );
  }
  f = message.getTransactionHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      8,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeBytes(
      9,
      f
    );
  }
};


/**
 * optional bytes address = 1;
 * @return {!(string|Uint8Array)}
 */
proto.Log.prototype.getAddress = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes address = 1;
 * This is a type-conversion wrapper around `getAddress()`
 * @return {string}
 */
proto.Log.prototype.getAddress_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAddress()));
};


/**
 * optional bytes address = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAddress()`
 * @return {!Uint8Array}
 */
proto.Log.prototype.getAddress_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAddress()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.Log} returns this
 */
proto.Log.prototype.setAddress = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * repeated bytes topics = 2;
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
proto.Log.prototype.getTopicsList = function() {
  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * repeated bytes topics = 2;
 * This is a type-conversion wrapper around `getTopicsList()`
 * @return {!Array<string>}
 */
proto.Log.prototype.getTopicsList_asB64 = function() {
  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
      this.getTopicsList()));
};


/**
 * repeated bytes topics = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTopicsList()`
 * @return {!Array<!Uint8Array>}
 */
proto.Log.prototype.getTopicsList_asU8 = function() {
  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getTopicsList()));
};


/**
 * @param {!(Array<!Uint8Array>|Array<string>)} value
 * @return {!proto.Log} returns this
 */
proto.Log.prototype.setTopicsList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 * @return {!proto.Log} returns this
 */
proto.Log.prototype.addTopics = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Log} returns this
 */
proto.Log.prototype.clearTopicsList = function() {
  return this.setTopicsList([]);
};


/**
 * optional bytes data = 3;
 * @return {!(string|Uint8Array)}
 */
proto.Log.prototype.getData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes data = 3;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.Log.prototype.getData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getData()));
};


/**
 * optional bytes data = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.Log.prototype.getData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getData()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.Log} returns this
 */
proto.Log.prototype.setData = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional uint32 index = 4;
 * @return {number}
 */
proto.Log.prototype.getIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.Log} returns this
 */
proto.Log.prototype.setIndex = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint32 block_index = 5;
 * @return {number}
 */
proto.Log.prototype.getBlockIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.Log} returns this
 */
proto.Log.prototype.setBlockIndex = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional bytes block_hash = 6;
 * @return {!(string|Uint8Array)}
 */
proto.Log.prototype.getBlockHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * optional bytes block_hash = 6;
 * This is a type-conversion wrapper around `getBlockHash()`
 * @return {string}
 */
proto.Log.prototype.getBlockHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBlockHash()));
};


/**
 * optional bytes block_hash = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBlockHash()`
 * @return {!Uint8Array}
 */
proto.Log.prototype.getBlockHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBlockHash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.Log} returns this
 */
proto.Log.prototype.setBlockHash = function(value) {
  return jspb.Message.setProto3BytesField(this, 6, value);
};


/**
 * optional uint32 transaction_index = 7;
 * @return {number}
 */
proto.Log.prototype.getTransactionIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.Log} returns this
 */
proto.Log.prototype.setTransactionIndex = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional bytes transaction_hash = 8;
 * @return {!(string|Uint8Array)}
 */
proto.Log.prototype.getTransactionHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * optional bytes transaction_hash = 8;
 * This is a type-conversion wrapper around `getTransactionHash()`
 * @return {string}
 */
proto.Log.prototype.getTransactionHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getTransactionHash()));
};


/**
 * optional bytes transaction_hash = 8;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTransactionHash()`
 * @return {!Uint8Array}
 */
proto.Log.prototype.getTransactionHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getTransactionHash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.Log} returns this
 */
proto.Log.prototype.setTransactionHash = function(value) {
  return jspb.Message.setProto3BytesField(this, 8, value);
};


/**
 * optional bytes rlp = 9;
 * @return {!(string|Uint8Array)}
 */
proto.Log.prototype.getRlp = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * optional bytes rlp = 9;
 * This is a type-conversion wrapper around `getRlp()`
 * @return {string}
 */
proto.Log.prototype.getRlp_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getRlp()));
};


/**
 * optional bytes rlp = 9;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRlp()`
 * @return {!Uint8Array}
 */
proto.Log.prototype.getRlp_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getRlp()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.Log} returns this
 */
proto.Log.prototype.setRlp = function(value) {
  return jspb.Message.setField(this, 9, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Log} returns this
 */
proto.Log.prototype.clearRlp = function() {
  return jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Log.prototype.hasRlp = function() {
  return jspb.Message.getField(this, 9) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Receipt.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Receipt.prototype.toObject = function(opt_includeInstance) {
  return proto.Receipt.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Receipt} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Receipt.toObject = function(includeInstance, msg) {
  var f, obj = {
    to: msg.getTo_asB64(),
    from: msg.getFrom_asB64(),
    transactionIndex: jspb.Message.getFieldWithDefault(msg, 6, 0),
    status: jspb.Message.getBooleanFieldWithDefault(msg, 7, false),
    contractAddress: msg.getContractAddress_asB64(),
    gasUsed: jspb.Message.getFieldWithDefault(msg, 9, 0),
    cumulativeGasUsed: jspb.Message.getFieldWithDefault(msg, 2, 0),
    logsBloom: msg.getLogsBloom_asB64(),
    logsList: jspb.Message.toObjectList(msg.getLogsList(),
    proto.Log.toObject, includeInstance),
    rlp: msg.getRlp_asB64(),
    merkleProof: (f = msg.getMerkleProof()) && proto.Proof.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Receipt}
 */
proto.Receipt.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Receipt;
  return proto.Receipt.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Receipt} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Receipt}
 */
proto.Receipt.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setTo(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setFrom(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTransactionIndex(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setStatus(value);
      break;
    case 8:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setContractAddress(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setGasUsed(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setCumulativeGasUsed(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setLogsBloom(value);
      break;
    case 4:
      var value = new proto.Log;
      reader.readMessage(value,proto.Log.deserializeBinaryFromReader);
      msg.addLogs(value);
      break;
    case 10:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setRlp(value);
      break;
    case 11:
      var value = new proto.Proof;
      reader.readMessage(value,proto.Proof.deserializeBinaryFromReader);
      msg.setMerkleProof(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Receipt.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Receipt.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Receipt} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Receipt.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTo_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getFrom_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      5,
      f
    );
  }
  f = message.getTransactionIndex();
  if (f !== 0) {
    writer.writeUint32(
      6,
      f
    );
  }
  f = message.getStatus();
  if (f) {
    writer.writeBool(
      7,
      f
    );
  }
  f = message.getContractAddress_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      8,
      f
    );
  }
  f = message.getGasUsed();
  if (f !== 0) {
    writer.writeUint64(
      9,
      f
    );
  }
  f = message.getCumulativeGasUsed();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getLogsBloom_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getLogsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.Log.serializeBinaryToWriter
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeBytes(
      10,
      f
    );
  }
  f = message.getMerkleProof();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.Proof.serializeBinaryToWriter
    );
  }
};


/**
 * optional bytes to = 1;
 * @return {!(string|Uint8Array)}
 */
proto.Receipt.prototype.getTo = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes to = 1;
 * This is a type-conversion wrapper around `getTo()`
 * @return {string}
 */
proto.Receipt.prototype.getTo_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getTo()));
};


/**
 * optional bytes to = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTo()`
 * @return {!Uint8Array}
 */
proto.Receipt.prototype.getTo_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getTo()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.Receipt} returns this
 */
proto.Receipt.prototype.setTo = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes from = 5;
 * @return {!(string|Uint8Array)}
 */
proto.Receipt.prototype.getFrom = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * optional bytes from = 5;
 * This is a type-conversion wrapper around `getFrom()`
 * @return {string}
 */
proto.Receipt.prototype.getFrom_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getFrom()));
};


/**
 * optional bytes from = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getFrom()`
 * @return {!Uint8Array}
 */
proto.Receipt.prototype.getFrom_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getFrom()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.Receipt} returns this
 */
proto.Receipt.prototype.setFrom = function(value) {
  return jspb.Message.setProto3BytesField(this, 5, value);
};


/**
 * optional uint32 transaction_index = 6;
 * @return {number}
 */
proto.Receipt.prototype.getTransactionIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.Receipt} returns this
 */
proto.Receipt.prototype.setTransactionIndex = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional bool status = 7;
 * @return {boolean}
 */
proto.Receipt.prototype.getStatus = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 7, false));
};


/**
 * @param {boolean} value
 * @return {!proto.Receipt} returns this
 */
proto.Receipt.prototype.setStatus = function(value) {
  return jspb.Message.setProto3BooleanField(this, 7, value);
};


/**
 * optional bytes contract_address = 8;
 * @return {!(string|Uint8Array)}
 */
proto.Receipt.prototype.getContractAddress = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * optional bytes contract_address = 8;
 * This is a type-conversion wrapper around `getContractAddress()`
 * @return {string}
 */
proto.Receipt.prototype.getContractAddress_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getContractAddress()));
};


/**
 * optional bytes contract_address = 8;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getContractAddress()`
 * @return {!Uint8Array}
 */
proto.Receipt.prototype.getContractAddress_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getContractAddress()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.Receipt} returns this
 */
proto.Receipt.prototype.setContractAddress = function(value) {
  return jspb.Message.setProto3BytesField(this, 8, value);
};


/**
 * optional uint64 gas_used = 9;
 * @return {number}
 */
proto.Receipt.prototype.getGasUsed = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.Receipt} returns this
 */
proto.Receipt.prototype.setGasUsed = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional uint64 cumulative_gas_used = 2;
 * @return {number}
 */
proto.Receipt.prototype.getCumulativeGasUsed = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.Receipt} returns this
 */
proto.Receipt.prototype.setCumulativeGasUsed = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional bytes logs_bloom = 3;
 * @return {!(string|Uint8Array)}
 */
proto.Receipt.prototype.getLogsBloom = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes logs_bloom = 3;
 * This is a type-conversion wrapper around `getLogsBloom()`
 * @return {string}
 */
proto.Receipt.prototype.getLogsBloom_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getLogsBloom()));
};


/**
 * optional bytes logs_bloom = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getLogsBloom()`
 * @return {!Uint8Array}
 */
proto.Receipt.prototype.getLogsBloom_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getLogsBloom()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.Receipt} returns this
 */
proto.Receipt.prototype.setLogsBloom = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * repeated Log logs = 4;
 * @return {!Array<!proto.Log>}
 */
proto.Receipt.prototype.getLogsList = function() {
  return /** @type{!Array<!proto.Log>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Log, 4));
};


/**
 * @param {!Array<!proto.Log>} value
 * @return {!proto.Receipt} returns this
*/
proto.Receipt.prototype.setLogsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.Log=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Log}
 */
proto.Receipt.prototype.addLogs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.Log, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Receipt} returns this
 */
proto.Receipt.prototype.clearLogsList = function() {
  return this.setLogsList([]);
};


/**
 * optional bytes rlp = 10;
 * @return {!(string|Uint8Array)}
 */
proto.Receipt.prototype.getRlp = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * optional bytes rlp = 10;
 * This is a type-conversion wrapper around `getRlp()`
 * @return {string}
 */
proto.Receipt.prototype.getRlp_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getRlp()));
};


/**
 * optional bytes rlp = 10;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRlp()`
 * @return {!Uint8Array}
 */
proto.Receipt.prototype.getRlp_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getRlp()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.Receipt} returns this
 */
proto.Receipt.prototype.setRlp = function(value) {
  return jspb.Message.setField(this, 10, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Receipt} returns this
 */
proto.Receipt.prototype.clearRlp = function() {
  return jspb.Message.setField(this, 10, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Receipt.prototype.hasRlp = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional Proof merkle_proof = 11;
 * @return {?proto.Proof}
 */
proto.Receipt.prototype.getMerkleProof = function() {
  return /** @type{?proto.Proof} */ (
    jspb.Message.getWrapperField(this, proto.Proof, 11));
};


/**
 * @param {?proto.Proof|undefined} value
 * @return {!proto.Receipt} returns this
*/
proto.Receipt.prototype.setMerkleProof = function(value) {
  return jspb.Message.setWrapperField(this, 11, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Receipt} returns this
 */
proto.Receipt.prototype.clearMerkleProof = function() {
  return this.setMerkleProof(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Receipt.prototype.hasMerkleProof = function() {
  return jspb.Message.getField(this, 11) != null;
};


goog.object.extend(exports, proto);
